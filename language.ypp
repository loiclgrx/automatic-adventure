%{
    #include <stdlib.h>
    #include <iostream>
    #include "global.hpp"
    extern int yyparse();
    extern int yylex(void);
    extern void yyerror(char*);

    TreeNode* mkleaf(int type, int value) {
        TreeNode* p = new TreeNode();
        p->type = type;
        p->leaf_value = value;
        return p;
    };

    TreeNode* mknode(int type, TreeNode* a0 = 0, TreeNode* a1 = 0, TreeNode* a2 = 0) {
        TreeNode* p = new TreeNode();
        p->type = type;
        p->args[0] = a0;
        p->args[1] = a1;
        p->args[2] = a2;
        return p;
    };
%}

%token DONE ID NUM MOD DIV READ WHILE IF ELSE PRINT
%right '='
%right '?' ':'
%left '|'
%left '&'
%left '<' '>'
%left '+' '-'
%left '*' '/' DIV '%' MOD
%left '^'

%union {
    TreeNode* p;
    int i;
};

%type <p> expr term statement statement_list block while_statement if_statement else_statement print_statement read_statement;
%type <i> ID NUM;

%%

start: statement_list DONE { printtree($1); printf("Result = %d", execute($1)); }
    ;

statement_list: statement ';' statement_list { $$ = mknode(';', $1, $3); }
    | statement ';' 
    ;

block: '{' statement_list '}' { $$ = $2; }
    | '{' '}' { $$ = nullptr; }
    ;

statement: expr
    | ID '=' expr { $$ = mknode('=', mkleaf(ID, $1), $3); }
    | while_statement
    | if_statement
    | print_statement
    | read_statement
    ;

while_statement: WHILE '(' expr ')' block { $$ = mknode(WHILE, $3, $5); }
    ;

if_statement: IF '(' expr ')' block { $$ = mknode(IF, $3, $5); }
    | IF '(' expr ')' block ELSE block { $$ = mknode(IF, $3, $5, $7); }
    ;

print_statement: PRINT '(' expr ')' { $$ = mknode(PRINT, $3); }
    ;

read_statement: READ '(' ID ')' { $$ = mknode(READ, mkleaf(ID, $3)); }
    ;

expr: expr '+' term { $$ = mknode('+', $1, $3); }
    | expr '-' term { $$ = mknode('-', $1, $3); }
    | expr '*' term { $$ = mknode('*', $1, $3); }
    | expr '/' term { $$ = mknode('/', $1, $3); }
    | expr '%' term { $$ = mknode('%', $1, $3); }
    | expr DIV term { $$ = mknode(DIV, $1, $3); }
    | expr MOD term { $$ = mknode(MOD, $1, $3); }
    | expr '^' term { $$ = mknode('^', $1, $3); }
    | expr '&' term { $$ = mknode('&', $1, $3); }
    | expr '|' term { $$ = mknode('|', $1, $3); }
    | expr '<' term { $$ = mknode('<', $1, $3); }
    | expr '>' term { $$ = mknode('>', $1, $3); }
    | expr '?' term ':' term { $$ = mknode('?', $1, mknode(':', $3, $5)); }
    | term
    ;

term: NUM { $$ = mkleaf(NUM, $1); }
    | ID { $$ = mkleaf(ID, $1); }
    | '(' expr ')' { $$ = $2; }
    ;

%%

void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

void parse() {
    yyparse();
}

void printtree1(TreeNode* p, int level) {
    if (p == 0)
        ;
    else if (p->type == ID) {
        printf("%*s", 2 * level, "");
        printf("%s\n", symtable[p->leaf_value].lexeme);
    }
    else if (p->type == NUM) {
        printf("%*s", 2 * level, "");
        printf("%d\n", p->leaf_value);
    }
    else if (p->type == '+') {
        printf("%*s", 2 * level, "");
        printf("+\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '=') {
        printf("%*s", 2 * level, "");
        printf("=\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '-') {
        printf("%*s", 2 * level, "");
        printf("-\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '*') {
        printf("%*s", 2 * level, "");
        printf("*\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '/') {
        printf("%*s", 2 * level, "");
        printf("/\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '%') {
        printf("%*s", 2 * level, "");
        printf("%%\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == DIV) {
        printf("%*s", 2 * level, "");
        printf("DIV\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == MOD) {
        printf("%*s", 2 * level, "");
        printf("MOD\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '^') {
        printf("%*s", 2 * level, "");
        printf("^\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '&') {
        printf("%*s", 2 * level, "");
        printf("&\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '|') {
        printf("%*s", 2 * level, "");
        printf("|\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '<') {
        printf("%*s", 2 * level, "");
        printf("<\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '>') {
        printf("%*s", 2 * level, "");
        printf(">\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == '?') {
        printf("%*s", 2 * level, "");
        printf("?\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == ':') {
        printf("%*s", 2 * level, "");
        printf(":\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == WHILE) {
        printf("%*s", 2 * level, "");
        printf("WHILE\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
    }
    else if (p->type == IF) {
        printf("%*s", 2 * level, "");
        printf("IF\n");
        printtree1(p->args[0], level + 1);
        printtree1(p->args[1], level + 1);
        if (p->args[2]) { // ELSE part
            printf("%*s", 2 * level, "");
            printf("ELSE\n");
            printtree1(p->args[2], level + 1);
        }
    }
    else if (p->type == PRINT) {
        printf("%*s", 2 * level, "");
        printf("PRINT\n");
        printtree1(p->args[0], level + 1);
    }
    else if (p->type == READ) {
        printf("%*s", 2 * level, "");
        printf("READ\n");
        printtree1(p->args[0], level + 1);
    }

    else if (p->type == ';') {
        printf("%*s", 2 * level, "");
        printtree1(p->args[0], level + 1);
        printf("%*s", 2 * level, "");
        printf(";\n");
        printtree1(p->args[1], level);
    }
}

void printtree(TreeNode* p) {
    printf("Syntax tree:\n");
    printtree1(p, 0);
}

int execute(TreeNode* p) {
    if (p == nullptr) {
        return 0;
    }

    if (p->type == '+') {
        return execute(p->args[0]) + execute(p->args[1]);
    }
    else if (p->type == '-') {
        return execute(p->args[0]) - execute(p->args[1]);
    }
    else if (p->type == '*') {
        return execute(p->args[0]) * execute(p->args[1]);
    }
    else if (p->type == '/') {
        return execute(p->args[0]) / execute(p->args[1]);
    }
    else if (p->type == '%') {
        return execute(p->args[0]) % execute(p->args[1]);
    }
    else if (p->type == DIV) {
        return execute(p->args[0]) / execute(p->args[1]);
    }
    else if (p->type == MOD) {
        return execute(p->args[0]) % execute(p->args[1]);
    }
    else if (p->type == '^') {
        int base = execute(p->args[0]);
        int exponent = execute(p->args[1]);
        int result = 1;
        for (int i = 0; i < exponent; ++i) {
            result *= base;
        }
        return result;
    }
    else if (p->type == '&') {
        return execute(p->args[0]) & execute(p->args[1]);
    }
    else if (p->type == '|') {
        return execute(p->args[0]) | execute(p->args[1]);
    }
    else if (p->type == '<') {
        return execute(p->args[0]) < execute(p->args[1]);
    }
    else if (p->type == '>') {
        return execute(p->args[0]) > execute(p->args[1]);
    }
    else if (p->type == '=') {
        symtable[p->args[0]->leaf_value].value = execute(p->args[1]);
        return symtable[p->args[0]->leaf_value].value;
    }
    else if (p->type == NUM) {
        return p->leaf_value;
    }
    else if (p->type == ID) {
        return symtable[p->leaf_value].value;
    }

    else if (p->type == ';') {
        execute(p->args[0]);
        execute(p->args[1]);
        return 0;
    }

    else if (p->type == WHILE) {
        while (execute(p->args[0])) {
            execute(p->args[1]);  // Execute the block inside the while loop
        }
        return 0;
    }

    else if (p->type == IF) {
        if (execute(p->args[0])) {
            execute(p->args[1]);  // Execute the true block
        }
        else if (p->args[2]) {
            execute(p->args[2]);  // Execute the else block if it exists
        }
        return 0;
    }

    else if (p->type == '{') {
        // Block statement, execute each statement in the block
        for (int i = 0; i < 3; ++i) {
            if (p->args[i]) {
                execute(p->args[i]);
            }
        }
        return 0;
    }

    else if (p->type == PRINT) {
        // Print statement, assuming it prints at least a single variable
        std::cout << execute(p->args[0]) << std::endl;
        return 0;
    }

    else if (p->type == READ) {
        // Read statement, ask for a value from the user
        std::cout << "Enter a value for variable " << (char)('A' + p->args[0]->leaf_value) << ": ";
        std::cin >> symtable[p->args[0]->leaf_value].value;
        return symtable[p->args[0]->leaf_value].value;
    }

    else {
        std::cerr << "Error: Unsupported operation. Error type = " << p->type << "\n";
        return 0;
    }
}